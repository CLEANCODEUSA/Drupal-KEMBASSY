<?php

function kembassy_preprocess_page(&$variables) {
  //$variables['logopath2'] = '/' . drupal_get_path('theme','kembassy') . 'assets/img/logo-2.png';
  $variables['logopath'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));

// Allowed view modes
  //$view_mode = $variables['view_mode']; // Retrieve view mode
//  $allowed_view_modes = ['full']; // Array of allowed view modes (for performance so as to not execute on unneeded nodes)

  // If view mode is in allowed view modes list, pass to THEME_add_regions_to_node()
//  if(in_array($view_mode, $allowed_view_modes)) {
    // Allowed regions (for performance so as to not execute for unneeded region)
    $allowed_regions = ['contact_page_webform'];
    kembassy_add_regions_to_node($allowed_regions, $variables);
//  }
}

function kembassy_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Extract the day, month, year from event content type field_event_date_and_time field so we can easily display in node--event.html.twig
  if (!empty($node->field_event_date_and_time)) {
    $variables['event_day'] = $node->field_event_date_and_time->view([
      'type' => 'datetime_custom',
      'settings' => ['date_format' => 'd'],
    ]);

    $variables['event_month'] = $node->field_event_date_and_time->view([
      'type' => 'datetime_custom',
      'settings' => ['date_format' => 'M'],
    ]);

    $variables['event_year'] = $node->field_event_date_and_time->view([
      'type' => 'datetime_custom',
      'settings' => ['date_format' => 'Y'],
    ]);
  }
}

/**
 * Add current page to drupal breadcrumb
 */
function kembassy_preprocess_breadcrumb(&$variables) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']) {
    $variables['breadcrumb'][] = array(
      'text' => $node->getTitle(),
      // comment below line if you do not want to link current page.
      'url' => $node->URL(),
    );
  }
}

/**
 * THEME_add_regions_to_node
 */
function kembassy_add_regions_to_node($allowed_regions, &$variables) {
  // Retrieve active theme
  $theme = \Drupal::theme()->getActiveTheme()->getName();

  // Retrieve theme regions
  $available_regions = system_region_list($theme, 'REGIONS_ALL');

  // Validate allowed regions with available regions
  $regions = array_intersect(array_keys($available_regions), $allowed_regions);

  // For each region
  foreach ($regions as $key => $region) {

    // Load region blocks
    $blocks = entity_load_multiple_by_properties('block', array('theme' => $theme, 'region' => $region));

    // Sort â€˜em
    uasort($blocks, 'Drupal\block\Entity\Block::sort');

    // Capture viewable blocks and their settings to $build
    $build = array();
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $build[$key] = entity_view($block, 'block');
      }
    }

    // Add build to region
    $variables[$region] = $build;
  }
}
